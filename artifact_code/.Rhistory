this_p <- produce_scorr_fig( this_corr_df, sort='paper',
this_svar=this_svar, include_legend=(this_svar=='Trust') )
assign( paste0(this_svar, '_plot'), this_p )
these_plots <- c( these_plots, this_p )
}
library(ggplot2)
library(dplyr)
library(tidyverse)
library(ggtext)
library(gridExtra)
library(ggpubr)
# local path management
current_path = rstudioapi::getActiveDocumentContext()$path
base_path <- paste0( str_split( current_path, "artifact_code" )[[1]][1], 'artifact_code/'  )
setwd(base_path)
source('utils/plotting_helpers.R')
# NOTE; this includes WER
## data can be produced from fig3_preprocess.ipynb
micro_corr_df_wer <- read.csv( 'data/micro_corr_df_wer.csv' )
# NOTE; NAs come from NA scorrs -- which correctly return NA for metrics with zero variance
comp_lst <- c( 'BP', 'Loss', 'PVI', 'TF', 'PH', 'IRT', 'SL' )
names(comp_lst) <- c( 'boundary_prox', 'losses', 'pvi', 'times_forgotten',
'instance_hardness', 'irt_difficulty', 'tok_len' )
these_svars <- c( 'Anxiety', 'Numeracy', 'Literacy', 'Trust', 'Depression' )
names(these_svars) <- c( 'Anxiety', 'Numeracy', 'SubjectiveLit', 'TrustPhys', 'wer'  )
these_plots <- list()
for( sname in names(these_svars) ){
this_svar <- these_svars[sname]
this_filepath <- paste0( 'data/corr_by_svar/micro_corr_df-for_', sname, '.csv' )
print( this_filepath  )
this_corr_df <- read.csv( this_filepath )
this_p <- produce_scorr_fig( this_corr_df, sort='paper',
this_svar=this_svar )
assign( paste0(this_svar, '_plot'), this_p )
these_plots <- c( these_plots, this_p )
}
Anxiety_plot +
theme(axis.title.x=element_blank())
Anxiety_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank(),
)
sv_fig <- ggarrange(Anxiety_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank()),
Numeracy_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank()),
Literacy_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank()),
Trust_plot,
Depression_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank()),
ncol = 2, nrow = 3)
sv_fig <- ggarrange(Anxiety_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank()),
Numeracy_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank()),
Literacy_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank()),
Trust_plot,
Depression_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank()),
ncol = 2, nrow = 3)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(ggtext)
library(gridExtra)
library(ggpubr)
# local path management
current_path = rstudioapi::getActiveDocumentContext()$path
base_path <- paste0( str_split( current_path, "artifact_code" )[[1]][1], 'artifact_code/'  )
setwd(base_path)
source('utils/plotting_helpers.R')
# NOTE; this includes WER
## data can be produced from fig3_preprocess.ipynb
micro_corr_df_wer <- read.csv( 'data/micro_corr_df_wer.csv' )
# NOTE; NAs come from NA scorrs -- which correctly return NA for metrics with zero variance
comp_lst <- c( 'BP', 'Loss', 'PVI', 'TF', 'PH', 'IRT', 'SL' )
names(comp_lst) <- c( 'boundary_prox', 'losses', 'pvi', 'times_forgotten',
'instance_hardness', 'irt_difficulty', 'tok_len' )
these_svars <- c( 'Anxiety', 'Numeracy', 'Literacy', 'Trust', 'Depression' )
names(these_svars) <- c( 'Anxiety', 'Numeracy', 'SubjectiveLit', 'TrustPhys', 'wer'  )
these_plots <- list()
for( sname in names(these_svars) ){
this_svar <- these_svars[sname]
this_filepath <- paste0( 'data/corr_by_svar/micro_corr_df-for_', sname, '.csv' )
print( this_filepath  )
this_corr_df <- read.csv( this_filepath )
this_p <- produce_scorr_fig( this_corr_df, sort='paper',
this_svar=this_svar )
assign( paste0(this_svar, '_plot'), this_p )
these_plots <- c( these_plots, this_p )
}
# TODO; remove legends for all but bottom right -- play with font
sv_fig <- ggarrange(Anxiety_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank()),
Numeracy_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank()),
Literacy_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank()),
Trust_plot,
Depression_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank()),
ncol = 2, nrow = 3)
Anxiety_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank())
Numeracy_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank())
sv_fig <- ggarrange(Anxiety_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank()),
Numeracy_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank()),
Literacy_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank()),
Trust_plot,
Depression_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank()),
ncol = 2, nrow = 3)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(ggtext)
library(gridExtra)
library(ggpubr)
# local path management
current_path = rstudioapi::getActiveDocumentContext()$path
base_path <- paste0( str_split( current_path, "artifact_code" )[[1]][1], 'artifact_code/'  )
setwd(base_path)
source('utils/plotting_helpers.R')
# NOTE; this includes WER
## data can be produced from fig3_preprocess.ipynb
micro_corr_df_wer <- read.csv( 'data/micro_corr_df_wer.csv' )
# NOTE; NAs come from NA scorrs -- which correctly return NA for metrics with zero variance
comp_lst <- c( 'BP', 'Loss', 'PVI', 'TF', 'PH', 'IRT', 'SL' )
names(comp_lst) <- c( 'boundary_prox', 'losses', 'pvi', 'times_forgotten',
'instance_hardness', 'irt_difficulty', 'tok_len' )
these_svars <- c( 'Anxiety', 'Numeracy', 'Literacy', 'Trust', 'Depression' )
names(these_svars) <- c( 'Anxiety', 'Numeracy', 'SubjectiveLit', 'TrustPhys', 'wer'  )
these_plots <- list()
for( sname in names(these_svars) ){
this_svar <- these_svars[sname]
this_filepath <- paste0( 'data/corr_by_svar/micro_corr_df-for_', sname, '.csv' )
print( this_filepath  )
this_corr_df <- read.csv( this_filepath )
this_p <- produce_scorr_fig( this_corr_df, sort='paper',
this_svar=this_svar )
assign( paste0(this_svar, '_plot'), this_p )
these_plots <- c( these_plots, this_p )
}
# for better formatting when faceted
Anxiety_plot <- Anxiety_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank())
Numeracy_plot <- Numeracy_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank())
Literacy_plot <- Literacy_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank())
Depression_plot <- Depression_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank())
sv_fig <- ggarrange(Anxiety_plot, Numeracy_plot, Literacy_plot,
Trust_plot, Depression_plot,
ncol = 2, nrow = 3)
sv_fig <- ggarrange(Anxiety_plot, Numeracy_plot, Literacy_plot,
Trust_plot, Depression_plot,
ncol = 2, nrow = 3)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(ggtext)
library(gridExtra)
library(ggpubr)
# local path management
current_path = rstudioapi::getActiveDocumentContext()$path
base_path <- paste0( str_split( current_path, "artifact_code" )[[1]][1], 'artifact_code/'  )
setwd(base_path)
source('utils/plotting_helpers.R')
# NOTE; this includes WER
## data can be produced from fig3_preprocess.ipynb
micro_corr_df_wer <- read.csv( 'data/micro_corr_df_wer.csv' )
# NOTE; NAs come from NA scorrs -- which correctly return NA for metrics with zero variance
comp_lst <- c( 'BP', 'Loss', 'PVI', 'TF', 'PH', 'IRT', 'SL' )
names(comp_lst) <- c( 'boundary_prox', 'losses', 'pvi', 'times_forgotten',
'instance_hardness', 'irt_difficulty', 'tok_len' )
these_svars <- c( 'Anxiety', 'Numeracy', 'Literacy', 'Trust', 'Depression' )
names(these_svars) <- c( 'Anxiety', 'Numeracy', 'SubjectiveLit', 'TrustPhys', 'wer'  )
these_plots <- list()
for( sname in names(these_svars) ){
this_svar <- these_svars[sname]
this_filepath <- paste0( 'data/corr_by_svar/micro_corr_df-for_', sname, '.csv' )
print( this_filepath  )
this_corr_df <- read.csv( this_filepath )
this_p <- produce_scorr_fig( this_corr_df, sort='paper',
this_svar=this_svar )
assign( paste0(this_svar, '_plot'), this_p )
these_plots <- c( these_plots, this_p )
}
# # for better formatting when faceted
# Anxiety_plot <- Anxiety_plot +
#   scale_color_discrete(guide='none')+
#   theme(axis.title.x=element_blank())
# Numeracy_plot <- Numeracy_plot +
#   scale_color_discrete(guide='none')+
#   theme(axis.title.x=element_blank())
# Literacy_plot <- Literacy_plot +
#   scale_color_discrete(guide='none')+
#   theme(axis.title.x=element_blank())
# Depression_plot <- Depression_plot +
#   scale_color_discrete(guide='none')+
#   theme(axis.title.x=element_blank())
# TODO; remove legends for all but bottom right -- play with font
sv_fig <- ggarrange(Anxiety_plot, Numeracy_plot, Literacy_plot,
Trust_plot, Depression_plot,
ncol = 2, nrow = 3)
sv_fig
# for better formatting when faceted
Anxiety_plot <- Anxiety_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank())
Numeracy_plot <- Numeracy_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank())
Literacy_plot <- Literacy_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank())
Depression_plot <- Depression_plot +
scale_color_discrete(guide='none')+
theme(axis.title.x=element_blank())
sv_fig <- ggarrange(Anxiety_plot, Numeracy_plot, Literacy_plot,
Trust_plot, Depression_plot,
ncol = 2, nrow = 3)
sv_fig
ggsave( "Appendix A7/micro_scorr_by_svar_v4.png", height=16, width=16, dpi = 180 )
sv_fig <- ggarrange(Anxiety_plot, Numeracy_plot, Literacy_plot,
Trust_plot, Depression_plot,
ncol = 3, nrow = 2)
sv_fig
library(ggplot2)
library(dplyr)
library(tidyverse)
# local path management
current_path = rstudioapi::getActiveDocumentContext()$path
base_path <- paste0( str_split( current_path, "artifact_code" )[[1]][1], 'artifact_code/'  )
setwd(base_path)
source('utils/plotting_helpers.R')
test_perform_full <- read.csv( 'data/test_perform_full.csv' )
ord_mets <- c( 'test_auc', 'test_acc', 'test_f1', 'irt_ability',
'Sex_NonMale.DI', 'Age_Senior.DI', 'Race_POC.DI', 'Income_Low.DI',
'Education_Low.DI', 'ESL.DI')
ord_names <- c( 'AUC', 'Acc.',  'F1 Score', 'IRT Ability',
'Sex ADI', 'Age ADI', 'Race ADI', 'Educ. ADI', 'Inc. ADI', 'ESL ADI')
ord_mets[1:4]
perform_met_names <- ord_names
names(perform_met_names) <- ord_mets
strat_names <- c( 'Boundary-hard', 'Random' )
names(strat_names) <- c( 'Constant', 'None' )
gath_perform <- test_perform_full %>%
mutate(irt_ability =  ( (irt_ability - min(irt_ability)) / (max(irt_ability) - min(irt_ability)) )) %>%
gather( metric, value,  -c(score_var, strat, model_name, model_type) )
gath_perform
gath_perform %>%
filter(metric %in% ord_mets[1:4]) %>%
mutate(metric = perform_met_names[metric],
strat = strat_names[strat]) %>%
rename(Sampling = strat) %>%
ggplot() +
geom_point(aes(x=score_var, y=value, color=`Sampling`, fill=`Sampling`),
alpha=0.6) +
facet_grid( ~metric ) +
scale_color_manual(values=c('darkgreen', 'orange'))+
scale_fill_manual(values=c('darkgreen', 'orange'))+
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
axis.title.y = element_blank(),
legend.position = 'bottom')
library(ggplot2)
library(dplyr)
library(tidyverse)
# local path management
current_path = rstudioapi::getActiveDocumentContext()$path
base_path <- paste0( str_split( current_path, "artifact_code" )[[1]][1], 'artifact_code/'  )
setwd(base_path)
source('utils/plotting_helpers.R')
test_perform_full <- read.csv( 'data/test_perform_full.csv' )
ord_mets <- c( 'test_auc', 'test_acc', 'test_f1', 'irt_ability',
'Sex_NonMale.DI', 'Age_Senior.DI', 'Race_POC.DI', 'Income_Low.DI',
'Education_Low.DI', 'ESL.DI')
ord_names <- c( 'AUC', 'Acc.',  'F1 Score', 'IRT Ability',
'Sex ADI', 'Age ADI', 'Race ADI', 'Educ. ADI', 'Inc. ADI', 'ESL ADI')
ord_mets[1:4]
perform_met_names <- ord_names
names(perform_met_names) <- ord_mets
strat_names <- c( 'Boundary-hard', 'Random' )
names(strat_names) <- c( 'Constant', 'None' )
strat_names <- c( 'Anxiety', 'Numeracy', 'Literacy', 'Trust', 'Depression' )
names(strat_names) <- c( 'Anxiety', 'Numeracy', 'SubjectiveLit', 'TrustPhys', 'wer' )
gath_perform <- test_perform_full %>%
mutate(irt_ability =  ( (irt_ability - min(irt_ability)) / (max(irt_ability) - min(irt_ability)) )) %>%
gather( metric, value,  -c(score_var, strat, model_name, model_type) )
gath_perform %>%
filter(metric %in% ord_mets[1:4]) %>%
mutate(metric = perform_met_names[metric],
strat = strat_names[strat]) %>%
rename(Sampling = strat) %>%
ggplot() +
geom_point(aes(x=score_var, y=value, color=`Sampling`, fill=`Sampling`),
alpha=0.6) +
facet_grid( ~metric ) +
scale_color_manual(values=c('darkgreen', 'orange'))+
scale_fill_manual(values=c('darkgreen', 'orange'))+
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
axis.title.y = element_blank(),
legend.position = 'bottom')
ggsave( "Appendix A9/perform_by_met_v3.png", height=5, width=8, dpi = 180 )
library(ggplot2)
library(dplyr)
library(tidyverse)
# local path management
current_path = rstudioapi::getActiveDocumentContext()$path
base_path <- paste0( str_split( current_path, "artifact_code" )[[1]][1], 'artifact_code/'  )
setwd(base_path)
source('utils/plotting_helpers.R')
test_perform_full <- read.csv( 'data/test_perform_full.csv' )
ord_mets <- c( 'test_auc', 'test_acc', 'test_f1', 'irt_ability',
'Sex_NonMale.DI', 'Age_Senior.DI', 'Race_POC.DI', 'Income_Low.DI',
'Education_Low.DI', 'ESL.DI')
ord_names <- c( 'AUC', 'Acc.',  'F1 Score', 'IRT Ability',
'Sex ADI', 'Age ADI', 'Race ADI', 'Educ. ADI', 'Inc. ADI', 'ESL ADI')
ord_mets[1:4]
perform_met_names <- ord_names
names(perform_met_names) <- ord_mets
strat_names <- c( 'Boundary-hard', 'Random' )
names(strat_names) <- c( 'Constant', 'None' )
svar_names <- c( 'Anxiety', 'Numeracy', 'Literacy', 'Trust', 'Depression' )
names(svar_names) <- c( 'Anxiety', 'Numeracy', 'SubjectiveLit', 'TrustPhys', 'wer' )
gath_perform <- test_perform_full %>%
mutate(irt_ability =  ( (irt_ability - min(irt_ability)) / (max(irt_ability) - min(irt_ability)) )) %>%
gather( metric, value,  -c(score_var, strat, model_name, model_type) )
gath_perform %>%
filter(metric %in% ord_mets[1:4]) %>%
mutate(metric = perform_met_names[metric],
strat = strat_names[strat]) %>%
rename(Sampling = strat) %>%
ggplot() +
geom_point(aes(x=svar_names[score_var], y=value, color=`Sampling`, fill=`Sampling`),
alpha=0.6) +
facet_grid( ~metric ) +
scale_color_manual(values=c('darkgreen', 'orange'))+
scale_fill_manual(values=c('darkgreen', 'orange'))+
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
axis.title.y = element_blank(),
legend.position = 'bottom')
gath_perform$score_var <- factor(gath_perform$score_var,
levels=names(svar_names),
ordered=TRUE)
gath_perform %>%
filter(metric %in% ord_mets[1:4]) %>%
mutate(metric = perform_met_names[metric],
strat = strat_names[strat]) %>%
rename(Sampling = strat) %>%
ggplot() +
geom_point(aes(x=svar_names[score_var], y=value, color=`Sampling`, fill=`Sampling`),
alpha=0.6) +
facet_grid( ~metric ) +
scale_color_manual(values=c('darkgreen', 'orange'))+
scale_fill_manual(values=c('darkgreen', 'orange'))+
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
axis.title.y = element_blank(),
legend.position = 'bottom')
gath_perform %>%
filter(metric %in% ord_mets[1:4]) %>%
mutate(metric = perform_met_names[metric],
strat = strat_names[strat]) %>%
rename(Sampling = strat) %>%
ggplot() +
geom_point(aes(x=svar_names[score_var], y=value, color=`Sampling`, fill=`Sampling`),
alpha=0.6) +
facet_grid( ~metric ) +
scale_color_manual(values=c('darkgreen', 'orange'))+
scale_fill_manual(values=c('darkgreen', 'orange'))+
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
axis.title.y = element_blank(),
legend.position = 'bottom')
gath_perform$score_var <- as.factor(gath_perform$score_var,
levels=names(svar_names),
ordered=TRUE)
gath_perform$score_var <- factor(gath_perform$score_var,
levels=names(svar_names))
gath_perform %>%
filter(metric %in% ord_mets[1:4]) %>%
mutate(metric = perform_met_names[metric],
strat = strat_names[strat]) %>%
rename(Sampling = strat) %>%
ggplot() +
geom_point(aes(x=svar_names[score_var], y=value, color=`Sampling`, fill=`Sampling`),
alpha=0.6) +
facet_grid( ~metric ) +
scale_color_manual(values=c('darkgreen', 'orange'))+
scale_fill_manual(values=c('darkgreen', 'orange'))+
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
axis.title.y = element_blank(),
legend.position = 'bottom')
gath_perform %>%
filter(metric %in% ord_mets[1:4]) %>%
mutate(metric = perform_met_names[metric],
strat = strat_names[strat]) %>%
rename(Sampling = strat) %>%
ggplot() +
geom_point(aes(x=svar_names[score_var], y=value, color=`Sampling`, fill=`Sampling`),
alpha=0.6) +
facet_grid( ~metric ) +
scale_color_manual(values=c('darkgreen', 'orange'))+
scale_fill_manual(values=c('darkgreen', 'orange'))+
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
axis.title.y = element_blank(),
legend.position = 'bottom')
library(ggplot2)
library(dplyr)
library(tidyverse)
# local path management
current_path = rstudioapi::getActiveDocumentContext()$path
base_path <- paste0( str_split( current_path, "artifact_code" )[[1]][1], 'artifact_code/'  )
setwd(base_path)
source('utils/plotting_helpers.R')
test_perform_full <- read.csv( 'data/test_perform_full.csv' )
ord_mets <- c( 'test_auc', 'test_acc', 'test_f1', 'irt_ability',
'Sex_NonMale.DI', 'Age_Senior.DI', 'Race_POC.DI', 'Income_Low.DI',
'Education_Low.DI', 'ESL.DI')
ord_names <- c( 'AUC', 'Acc.',  'F1 Score', 'IRT Ability',
'Sex ADI', 'Age ADI', 'Race ADI', 'Educ. ADI', 'Inc. ADI', 'ESL ADI')
ord_mets[1:4]
perform_met_names <- ord_names
names(perform_met_names) <- ord_mets
strat_names <- c( 'Boundary-hard', 'Random' )
names(strat_names) <- c( 'Constant', 'None' )
svar_names <- c( 'Anxiety', 'Numeracy', 'Literacy', 'Trust', 'Depression' )
names(svar_names) <- c( 'Anxiety', 'Numeracy', 'SubjectiveLit', 'TrustPhys', 'wer' )
gath_perform <- test_perform_full %>%
mutate(irt_ability =  ( (irt_ability - min(irt_ability)) / (max(irt_ability) - min(irt_ability)) )) %>%
gather( metric, value,  -c(score_var, strat, model_name, model_type) )
gath_perform$score_var <- factor(gath_perform$score_var,
levels=names(svar_names))
gath_perform %>%
filter(metric %in% ord_mets[1:4]) %>%
mutate(metric = perform_met_names[metric],
strat = strat_names[strat]) %>%
rename(Sampling = strat) %>%
ggplot() +
geom_point(aes(x=svar_names[score_var], y=value, color=`Sampling`, fill=`Sampling`),
alpha=0.6) +
facet_grid( ~metric ) +
scale_color_manual(values=c('darkgreen', 'orange'))+
scale_fill_manual(values=c('darkgreen', 'orange'))+
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
axis.title.y = element_blank(),
legend.position = 'bottom')
ord_mets
gath_perform$score_var <- factor(gath_perform$score_var,
levels=c( 'Anxiety', 'Numeracy', 'SubjectiveLit', 'TrustPhys', 'wer' ))
gath_perform %>%
filter(metric %in% ord_mets[1:4]) %>%
mutate(metric = perform_met_names[metric],
strat = strat_names[strat]) %>%
rename(Sampling = strat) %>%
ggplot() +
geom_point(aes(x=svar_names[score_var], y=value, color=`Sampling`, fill=`Sampling`),
alpha=0.6) +
facet_grid( ~metric ) +
scale_color_manual(values=c('darkgreen', 'orange'))+
scale_fill_manual(values=c('darkgreen', 'orange'))+
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
axis.title.y = element_blank(),
legend.position = 'bottom')
gath_perform$score_var <- factor(gath_perform$score_var,
levels=c( 'Anxiety', 'Numeracy', 'SubjectiveLit', 'TrustPhys', 'wer' ))
